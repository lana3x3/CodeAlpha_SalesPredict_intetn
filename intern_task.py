# -*- coding: utf-8 -*-
"""intern task

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/lanamedea/intern-task.29acd3eb-31ee-45a2-a92c-939e35442c11.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250715/auto/storage/goog4_request%26X-Goog-Date%3D20250715T164916Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D01eb083bda8bb4e0e06a8f02009644f687f8ccc41740a9b9b4aed309bf2867fd9bc933a199871787b6344d485051cc0206538ee5ceb9ccd5f479797dd09020918dba574ab1f4994a8267a61e61a072082815d22a825e215858d11d5e04305b29fc75cf940f16a7785715089f25324e2453ee8392da18d77b478444ccd7b71925b64100ffc829416865d44c7658bbd3b9201c4d9a9b53daa99e30b18d84ccbc1b081cbc4e7becf038289db5689ac953d97c6352c1390696eb543780cc2bf4faeeb2349f94bca18e33ca4193422137734c716cdba4b7aff8290ffd57ac3dde8bc15c444748fac23474287c5500c2c595dae9d39fe2f264c33de1903335188cc4d0
"""

# IMPORTANT: SOME KAGGLE DATA SOURCES ARE PRIVATE
# RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES.
import kagglehub
kagglehub.login()

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

bumba5341_advertisingcsv_path = kagglehub.dataset_download('bumba5341/advertisingcsv')
lanamedea_advertising_path = kagglehub.dataset_download('lanamedea/advertising')

print('Data source import complete.')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_squared_error
import shap
import warnings
warnings.filterwarnings("ignore")

df = pd.read_csv('/kaggle/input/advertisingcsv/Advertising.csv')

if 'Unnamed: 0' in df.columns:
    df.drop('Unnamed: 0', axis=1, inplace=True)
df.columns = df.columns.str.strip()
print(df.head())

print("Missing values:\\n", df.isnull().sum())
print(df.info())

sns.pairplot(df)
plt.suptitle("Feature Relationships", y=1.02)
plt.show()

plt.figure(figsize=(8, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.show()

X = df[['TV', 'Radio', 'Newspaper']]
y = df['Sales']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred = lr.predict(X_test)

print("Linear Regression R2:", r2_score(y_test, y_pred))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))

fig = px.scatter(x=y_test, y=y_pred, labels={'x': 'Actual Sales', 'y': 'Predicted Sales'}, title="Actual vs Predicted Sales")
fig.add_shape(type="line", x0=min(y_test), y0=min(y_test), x1=max(y_test), y1=max(y_test), line=dict(color="red"))
fig.show()

coef_df = pd.DataFrame(lr.coef_, X.columns, columns=['Coefficient'])
coef_df['Impact on Sales'] = coef_df['Coefficient'].apply(lambda x: f"{x:.2f} ↑" if x > 0 else f"{x:.2f} ↓")
print("\\nFeature Coefficients:\\n", coef_df)

rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)
print("Random Forest R2:", r2_score(y_test, rf_pred))
print("Random Forest RMSE:", np.sqrt(mean_squared_error(y_test, rf_pred)))

explainer = shap.Explainer(lr, X_train)
shap_values = explainer(X_test)
shap.summary_plot(shap_values, X_test)

print("Business Insight:")
print("- TV ads have the highest impact on sales based on coefficient analysis.")
print("- Consider reducing Newspaper budget if cost-to-impact ratio is low.")
print("- Best ROI is likely from focusing on TV and Radio campaigns.")
"""

path = "/mnt/data/advanced_sales_prediction.py"
with open(path, "w") as f:
    f.write(code)

path
# Save the advanced full code as a Python file
code = """
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_squared_error
import shap
import warnings
warnings.filterwarnings("ignore")

df = pd.read_csv("/kaggle/input/advertisingcsv/Advertising.csv")
df.columns = df.columns.str.strip()
df.to_csv("advertising.csv", index=False)

print("Missing values:\\n", df.isnull().sum())
print(df.info())

sns.pairplot(df)
plt.suptitle("Feature Relationships", y=1.02)
plt.show()

plt.figure(figsize=(8, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.show()

X = df[['TV', 'Radio', 'Newspaper']]
y = df['Sales']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred = lr.predict(X_test)

print("Linear Regression R2:", r2_score(y_test, y_pred))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))

fig = px.scatter(x=y_test, y=y_pred, labels={'x': 'Actual Sales', 'y': 'Predicted Sales'}, title="Actual vs Predicted Sales")
fig.add_shape(type="line", x0=min(y_test), y0=min(y_test), x1=max(y_test), y1=max(y_test), line=dict(color="red"))
fig.show()

coef_df = pd.DataFrame(lr.coef_, X.columns, columns=['Coefficient'])
coef_df['Impact on Sales'] = coef_df['Coefficient'].apply(lambda x: f"{x:.2f} ↑" if x > 0 else f"{x:.2f} ↓")
print("\\nFeature Coefficients:\\n", coef_df)

rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)
print("Random Forest R2:", r2_score(y_test, rf_pred))
print("Random Forest RMSE:", np.sqrt(mean_squared_error(y_test, rf_pred)))

explainer = shap.Explainer(lr, X_train)
shap_values = explainer(X_test)
shap.summary_plot(shap_values, X_test)

print("Business Insight:")
print("- TV ads have the highest impact on sales based on coefficient analysis.")
print("- Consider reducing Newspaper budget if cost-to-impact ratio is low.")
print("- Best ROI is likely from focusing on TV and Radio campaigns.")

import numpy as np

# Add fake 'Platform' and 'Segment' columns to match task requirement
np.random.seed(42)  # For reproducibility
df['Platform'] = np.random.choice(['YouTube', 'Instagram', 'TV', 'Radio'], size=len(df))
df['Segment'] = np.random.choice(['Teens', 'Adults', 'Seniors'], size=len(df))

df = pd.get_dummies(df, columns=['Platform', 'Segment'], drop_first=True)

from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error

lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)

# Evaluation
r2 = r2_score(y_test, y_pred_lr)
rmse = mean_squared_error(y_test, y_pred_lr, squared=False)

print("R²:", r2)
print("RMSE:", rmse)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import shap
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import warnings

warnings.filterwarnings("ignore")

# Load dataset

df = pd.read_csv('/kaggle/input/advertisingcsv/Advertising.csv')

if 'Unnamed: 0' in df.columns:
    df.drop('Unnamed: 0', axis=1, inplace=True)
df.columns = df.columns.str.strip()

# Simulate additional features
np.random.seed(42)
df['Platform'] = np.random.choice(['YouTube', 'Instagram', 'TV', 'Radio'], size=len(df))
df['Segment'] = np.random.choice(['Teens', 'Adults', 'Seniors'], size=len(df))

# One-hot encode categorical features
df = pd.get_dummies(df, columns=['Platform', 'Segment'], drop_first=True)

# Feature engineering
df['TV_Radio'] = df['TV'] * df['Radio']
df['TV_squared'] = df['TV'] ** 2

# Define features and target
X = df.drop('Sales', axis=1)
y = df['Sales']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)
rmse_lr = mean_squared_error(y_test, y_pred_lr, squared=False)

# Random Forest Regression
rf = RandomForestRegressor(random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)
rmse_rf = mean_squared_error(y_test, y_pred_rf, squared=False)

# Evaluation Results
results = pd.DataFrame({
    "Model": ["Linear Regression", "Random Forest"],
    "R2": [r2_score(y_test, y_pred_lr), r2_score(y_test, y_pred_rf)],
    "RMSE": [rmse_lr, rmse_rf]
})

print("Model Comparison:")
print(results)

# SHAP Analysis (only on Random Forest)
explainer = shap.TreeExplainer(rf)
shap_values = explainer.shap_values(X_test)

shap.summary_plot(shap_values, X_test, plot_type="bar", show=False)
plt.title("Feature Importance via SHAP")
plt.tight_layout()
plt.savefig("shap_summary.png")

# Save predictions to file
pd.DataFrame({
    "Actual": y_test.values,
    "Linear_Predicted": y_pred_lr,
    "RF_Predicted": y_pred_rf
}).to_csv("predictions.csv", index=False)

from sklearn.model_selection import cross_val_score
cv_scores = cross_val_score(lr, X, y, cv=5)
print("CV Mean R²:", np.mean(cv_scores))

import joblib
joblib.dump(lr, "sales_model.pkl")

import plotly.express as px
import ipywidgets as widgets
from IPython.display import display

tv_slider = widgets.FloatSlider(value=100, min=0, max=300, step=1, description="TV:")
radio_slider = widgets.FloatSlider(value=50, min=0, max=100, step=1, description="Radio:")
newspaper_slider = widgets.FloatSlider(value=30, min=0, max=100, step=1, description="Newspaper:")

def predict_sales(tv, radio, newspaper):
    import numpy as np
    input_data = pd.DataFrame([[tv, radio, newspaper]], columns=["TV", "Radio", "Newspaper"])
    prediction = model.predict(input_data)[0]
    print(f"📈 Predicted Sales: {prediction:.2f}")

ui = widgets.VBox([tv_slider, radio_slider, newspaper_slider])
out = widgets.interactive_output(predict_sales, {
    "tv": tv_slider,
    "radio": radio_slider,
    "newspaper": newspaper_slider
})

display(ui, out)

pip install gradio

import pandas as pd
from sklearn.linear_model import LinearRegression
import joblib

# تحميل البيانات
df = pd.read_csv("/kaggle/input/advertising/Advertising.csv")
df = df.drop(columns=["Unnamed: 0"], errors="ignore")

# تقسيم الميزات والهدف
X = df[["TV", "Radio", "Newspaper"]]
y = df["Sales"]

# تدريب النموذج
model = LinearRegression()
model.fit(X, y)

# حفظ النموذج
joblib.dump(model, "sales_model.pkl")

# حفظ أسماء الأعمدة
joblib.dump(list(X.columns), "model_columns.pkl")

print("✅ تم حفظ sales_model.pkl و model_columns.pkl")

import pandas as pd
from sklearn.linear_model import LinearRegression
import joblib

# تحميل البيانات
df = pd.read_csv("/kaggle/input/advertising/Advertising.csv")
df = df.drop(columns=["Unnamed: 0"], errors="ignore")

# تقسيم الميزات والهدف
X = df[["TV", "Radio", "Newspaper"]]
y = df["Sales"]

# تدريب النموذج
model = LinearRegression()
model.fit(X, y)

# حفظ النموذج
joblib.dump(model, "sales_model.pkl")

# حفظ أسماء الأعمدة
joblib.dump(list(X.columns), "model_columns.pkl")

print("✅ تم حفظ sales_model.pkl و model_columns.pkl")

import gradio as gr
import pandas as pd
import joblib

# تحميل النموذج والأعمدة
model = joblib.load("sales_model.pkl")
model_columns = joblib.load("model_columns.pkl")

# تعريف دالة التنبؤ
def predict_sales(tv, radio, newspaper, platform, segment):
    row = {
        "TV": tv,
        "Radio": radio,
        "Newspaper": newspaper,
        f"Platform_{platform}": 1,
        f"Segment_{segment}": 1
    }

    input_data = pd.DataFrame([{col: row.get(col, 0) for col in model_columns}])
    prediction = model.predict(input_data)[0]
    return f"Predicted Sales: {prediction:.2f}"

# إنشاء الواجهة
iface = gr.Interface(
    fn=predict_sales,
    inputs=[
        gr.Slider(0, 300, label="TV"),
        gr.Slider(0, 100, label="Radio"),
        gr.Slider(0, 100, label="Newspaper"),
        gr.Dropdown(["TV", "Radio", "YouTube"], label="Platform"),
        gr.Dropdown(["Seniors", "Adults", "Teens"], label="Segment"),
    ],
    outputs=gr.Textbox(label="Predicted Sales"),
    title="Sales Prediction Dashboard",
    description="Enter advertising spend and target to predict sales."
)

iface.launch()